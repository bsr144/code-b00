{
	"info": {
		"_postman_id": "f4f37242-10c1-446d-bb29-e89e558bf2da",
		"name": "Boo-Test REST API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23512643"
	},
	"item": [
		{
			"name": "Profiles",
			"item": [
				{
					"name": "Create Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"user\": \"65e5cd191d29849acf47681e\",\n  \"name\": \"Bastian\",\n  \"age\": 20,\n  \"bio\": \"Software engineer with a passion for technology and outdoor activities.\",\n  \"interests\": [\"Technology\", \"Hiking\", \"Reading\"],\n  \"gender\": \"Male\",\n  \"lookingFor\": [\"Companionship\", \"Friendship\", \"Tech meetups\"],\n  \"profilePictures\": [\n    { \"imageUrl\": \"http://example.com/path/to/image1.jpg\" },\n    { \"imageUrl\": \"http://example.com/path/to/image2.jpg\" }\n  ],\n  \"location\": {\n    \"type\": \"Point\",\n    \"coordinates\": \"37.773972, -122.431297\"\n  }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{dev_base_url}}/api/profiles",
							"host": [
								"{{dev_base_url}}"
							],
							"path": [
								"api",
								"profiles"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userId\": \"65e5b3ab8863bc63ca444b4b\",\n  \"name\": \"John Doe\",\n  \"age\": 30,\n  \"bio\": \"Software engineer with a passion for technology and outdoor activities.\",\n  \"interests\": [\"Technology\", \"Hiking\", \"Reading\"],\n  \"gender\": \"Male\",\n  \"lookingFor\": [\"Networking\", \"Friendship\", \"Tech meetups\"],\n  \"profilePictures\": [\n    { \"imageUrl\": \"http://example.com/path/to/image1.jpg\" },\n    { \"imageUrl\": \"http://example.com/path/to/image2.jpg\" }\n  ],\n  \"location\": {\n    \"type\": \"Point\",\n    \"coordinates\": \"37.773972, -122.431297\"\n  }\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev_base_url}}/api/profiles",
									"host": [
										"{{dev_base_url}}"
									],
									"path": [
										"api",
										"profiles"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "Validation Error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"userId\": \"65e5b3ab8863bc63ca444b4b\",\n  \"name\": \"\",\n  \"age\": 30,\n  \"bio\": \"Software engineer with a passion for technology and outdoor activities.\",\n  \"interests\": [\"Technology\", \"Hiking\", \"Reading\"],\n  \"gender\": \"Male\",\n  \"lookingFor\": [\"\", \"Friendship\", \"Tech meetups\"],\n  \"profilePictures\": [\n    { \"imageUrl\": \"http://example.com/path/to/image1.jpg\" },\n    { \"imageUrl\": \"http://example.com/path/to/image2.jpg\" }\n  ],\n  \"location\": {\n    \"type\": \"Point\",\n    \"coordinates\": \"37.773972, -122.431297\"\n  }\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev_base_url}}/api/profiles",
									"host": [
										"{{dev_base_url}}"
									],
									"path": [
										"api",
										"profiles"
									]
								}
							},
							"status": "Unprocessable Entity",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
								},
								{
									"key": "Cross-Origin-Opener-Policy",
									"value": "same-origin"
								},
								{
									"key": "Cross-Origin-Resource-Policy",
									"value": "same-origin"
								},
								{
									"key": "Origin-Agent-Cluster",
									"value": "?1"
								},
								{
									"key": "Referrer-Policy",
									"value": "no-referrer"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "X-Permitted-Cross-Domain-Policies",
									"value": "none"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "5"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "1"
								},
								{
									"key": "Date",
									"value": "Mon, 04 Mar 2024 11:46:39 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1709552815"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "201"
								},
								{
									"key": "ETag",
									"value": "W/\"c9-yunTpmB2tv6ey5v7dIN/3fyZaTU\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"errors\": [\n        {\n            \"type\": \"field\",\n            \"value\": \"\",\n            \"msg\": \"Name is required.\",\n            \"path\": \"name\",\n            \"location\": \"body\"\n        },\n        {\n            \"type\": \"field\",\n            \"value\": \"\",\n            \"msg\": \"Looking for cannot be empty.\",\n            \"path\": \"lookingFor\",\n            \"location\": \"body\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Get Profile By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{dev_base_url}}/api/profiles/:profileId",
							"host": [
								"{{dev_base_url}}"
							],
							"path": [
								"api",
								"profiles",
								":profileId"
							],
							"variable": [
								{
									"key": "profileId",
									"value": "65e5cb5b0dd7b875f0aac810"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				}
			]
		},
		{
			"name": "Comments",
			"item": [
				{
					"name": "Create Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"text\": \"Best journal ever!\",\n  \"author\": \"65e5f56de5e3f23b7cfb86d2\",\n  \"personality\": {\n    \"MBTI\": \"INTJ\",\n    \"Enneagram\": \"5w4\",\n    \"Zodiac\": \"Leo\"\n  }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{dev_base_url}}/api/comments",
							"host": [
								"{{dev_base_url}}"
							],
							"path": [
								"api",
								"comments"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Like Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"65e5e22f7a23d8c13e8ff748\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{dev_base_url}}/api/comments/:commentId/like",
							"host": [
								"{{dev_base_url}}"
							],
							"path": [
								"api",
								"comments",
								":commentId",
								"like"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "65e5e2337a23d8c13e8ff74a"
								}
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Unlike Comment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"65e5d0073e38ffde3f9225b8\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{dev_base_url}}/api/comments/:commentId/unlike",
							"host": [
								"{{dev_base_url}}"
							],
							"path": [
								"api",
								"comments",
								":commentId",
								"unlike"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "65e5d0003e38ffde3f9225b6"
								}
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Get Comment By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{dev_base_url}}/api/comments/:commentId",
							"host": [
								"{{dev_base_url}}"
							],
							"path": [
								"api",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "65e5f572e5e3f23b7cfb86d4"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Get Comments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{dev_base_url}}/api/comments?type=MBTI&MBTI=INTJ&sort=recent",
							"host": [
								"{{dev_base_url}}"
							],
							"path": [
								"api",
								"comments"
							],
							"query": [
								{
									"key": "type",
									"value": "MBTI"
								},
								{
									"key": "MBTI",
									"value": "INTJ"
								},
								{
									"key": "sort",
									"value": "recent"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": [
						{
							"name": "All",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{dev_base_url}}/api/comments",
									"host": [
										"{{dev_base_url}}"
									],
									"path": [
										"api",
										"comments"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "Sort Best",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{dev_base_url}}/api/comments?sort=best",
									"host": [
										"{{dev_base_url}}"
									],
									"path": [
										"api",
										"comments"
									],
									"query": [
										{
											"key": "sort",
											"value": "best"
										}
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "Sort Recent",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{dev_base_url}}/api/comments",
									"host": [
										"{{dev_base_url}}"
									],
									"path": [
										"api",
										"comments"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						}
					]
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Sowams\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{dev_base_url}}/api/users",
							"host": [
								"{{dev_base_url}}"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": [
						{
							"name": "Success",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"John Doe\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev_base_url}}/api/users",
									"host": [
										"{{dev_base_url}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"_postman_previewlanguage": null,
							"header": null,
							"cookie": [],
							"body": null
						},
						{
							"name": "Validation Error",
							"originalRequest": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"John Doe\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{dev_base_url}}/api/users",
									"host": [
										"{{dev_base_url}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"status": "Unprocessable Entity",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Security-Policy",
									"value": "default-src 'self';base-uri 'self';font-src 'self' https: data:;form-action 'self';frame-ancestors 'self';img-src 'self' data:;object-src 'none';script-src 'self';script-src-attr 'none';style-src 'self' https: 'unsafe-inline';upgrade-insecure-requests"
								},
								{
									"key": "Cross-Origin-Opener-Policy",
									"value": "same-origin"
								},
								{
									"key": "Cross-Origin-Resource-Policy",
									"value": "same-origin"
								},
								{
									"key": "Origin-Agent-Cluster",
									"value": "?1"
								},
								{
									"key": "Referrer-Policy",
									"value": "no-referrer"
								},
								{
									"key": "Strict-Transport-Security",
									"value": "max-age=15552000; includeSubDomains"
								},
								{
									"key": "X-Content-Type-Options",
									"value": "nosniff"
								},
								{
									"key": "X-DNS-Prefetch-Control",
									"value": "off"
								},
								{
									"key": "X-Download-Options",
									"value": "noopen"
								},
								{
									"key": "X-Frame-Options",
									"value": "SAMEORIGIN"
								},
								{
									"key": "X-Permitted-Cross-Domain-Policies",
									"value": "none"
								},
								{
									"key": "X-XSS-Protection",
									"value": "0"
								},
								{
									"key": "Access-Control-Allow-Origin",
									"value": "*"
								},
								{
									"key": "X-RateLimit-Limit",
									"value": "5"
								},
								{
									"key": "X-RateLimit-Remaining",
									"value": "4"
								},
								{
									"key": "Date",
									"value": "Mon, 04 Mar 2024 11:51:03 GMT"
								},
								{
									"key": "X-RateLimit-Reset",
									"value": "1709553124"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "98"
								},
								{
									"key": "ETag",
									"value": "W/\"62-6LkoNtwcmNU5b3o1I5ghOY1JjP8\""
								},
								{
									"key": "Vary",
									"value": "Accept-Encoding"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"errors\": [\n        {\n            \"type\": \"field\",\n            \"value\": \"\",\n            \"msg\": \"Name is required.\",\n            \"path\": \"name\",\n            \"location\": \"body\"\n        }\n    ]\n}"
						}
					]
				}
			]
		},
		{
			"name": "Update data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"Add your name in the body\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{dev_base_url}}/profiles?id=1",
					"host": [
						"{{dev_base_url}}"
					],
					"path": [
						"profiles"
					],
					"query": [
						{
							"key": "id",
							"value": "1"
						}
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Delete data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{dev_base_url}}/profiles?id=1",
					"host": [
						"{{dev_base_url}}"
					],
					"path": [
						"profiles"
					],
					"query": [
						{
							"key": "id",
							"value": "1"
						}
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}